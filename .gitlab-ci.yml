variables:
  DOCKER_REGISTRY: https://gcr.io
  DOCKER_REGISTRY_URL: gcr.io/ecad-auth
  SERVICE_ACCOUNT: /etc/deploy/service_account
  GCP_ZONE: northamerica-northeast1-b
  GCP_PROJECT: ecad-infrastructure
  K8S_CLUSTER_NAME: ecad-montreal

stages:
  - test
  - build
  - deploy

# test-auth:
  # stage: test
  # image: golang:alpine
  # services:
    # - postgres:latest
  # script:
    # - mkdir -p /go/src/git.ecadlabs.com/ecad/auth
    # - cp -r * /go/src/git.ecadlabs.com/ecad/auth
    # - cd /go/src/git.ecadlabs.com/ecad/auth/intergationtesting
    # - go test -db "postgres://postgres@postgres/postgres?connect_timeout=10&sslmode=disable"

# docker-build-auth:
  # stage: build
  # image: docker
  # services:
    # - docker:dind
  # script:
    # - echo ${GOOGLE_GCR_KEY} | docker login -u _json_key --password-stdin ${DOCKER_REGISTRY}
    # - >
      # docker build 
      # -t "${DOCKER_REGISTRY_URL}/auth:${CI_COMMIT_REF_NAME}" 
      # -t "${DOCKER_REGISTRY_URL}/auth:latest" 
      # .
    # - docker push "${DOCKER_REGISTRY_URL}/auth:${CI_COMMIT_REF_NAME}"
    # - docker push "${DOCKER_REGISTRY_URL}/auth:latest"

# build-auth-api-docs:
  # stage: build
  # image: docker
  # services:
    # - docker:dind
  # script:
    # - echo ${GOOGLE_GCR_KEY} | docker login -u _json_key --password-stdin ${DOCKER_REGISTRY}
    # - cd apidocs
    # - >
      # docker build 
      # -t "${DOCKER_REGISTRY_URL}/auth_api_docs:${CI_COMMIT_REF_NAME}" 
      # -t "${DOCKER_REGISTRY_URL}/auth_api_docs:latest" 
      # .
    # - docker push "${DOCKER_REGISTRY_URL}/auth_api_docs:${CI_COMMIT_REF_NAME}"
    # - docker push "${DOCKER_REGISTRY_URL}/auth_api_docs:latest"


build-auth-webapp-packages:
  stage: build
  image: node:alpine
  services:
    - docker:dind
  script:
    - apk add --no-cache jq
    - cd webapp
    - echo ${NPM_RC} > $HOME/.npmrc
    - npm ci
    - $(npm bin)/ng build --prod ecad-angular-auth
    - cd dist/ecad-angular-auth
    - cat package.json | jq '.version'
    - mv package.json package_bak.json
    - npm show ecad-angular-auth version --registry http://npm.ecadlabs.com
    - cat package_bak.json | jq -M ".version=$(npm show ecad-angular-auth version --registry http://npm.ecadlabs.com)" > package.json
    - cat package.json | jq '.version'
    - npm version patch
    - cat package.json | jq '.version'
    - npm publish --registry http://npm.ecadlabs.com --tag ${CI_COMMIT_REF_NAME}
    - npm show ecad-angular-auth version --registry http://npm.ecadlabs.com
  only:
  - tags

# build-auth-webapp:
  # stage: build
  # image: docker
  # services:
    # - docker:dind
  # script:
    # - echo ${GOOGLE_GCR_KEY} | docker login -u _json_key --password-stdin ${DOCKER_REGISTRY}
    # - cd webapp
    # - >
      # docker build 
      # -t "${DOCKER_REGISTRY_URL}/auth_webapp:${CI_COMMIT_REF_NAME}" 
      # -t "${DOCKER_REGISTRY_URL}/auth_webapp:latest" 
      # .
    # - docker push "${DOCKER_REGISTRY_URL}/auth_webapp:${CI_COMMIT_REF_NAME}"
    # - docker push "${DOCKER_REGISTRY_URL}/auth_webapp:latest"


.deploy_tpl: &deploy_tpl
  stage: deploy
  image: google/cloud-sdk
  before_script:
    - mkdir -p /etc/deploy
    - echo ${DEPLOY_KEY_PROD} > ${SERVICE_ACCOUNT}
    - gcloud auth activate-service-account --key-file ${SERVICE_ACCOUNT}
    - gcloud config set project ${GCP_PROJECT}
    - >
        gcloud container clusters get-credentials ${K8S_CLUSTER_NAME}
        --zone ${GCP_ZONE} --project ${GCP_PROJECT}
  script:
    - kubectl get pods -n ${CI_ENVIRONMENT_NAME}
    - echo ${CONTAINER_URL}:${CI_COMMIT_REF_NAME}
    - >
        kubectl set image deployment/auth
        auth-image=${CONTAINER_URL}:${CI_COMMIT_REF_NAME}
        --namespace=${CI_ENVIRONMENT_NAME}
    - >
        kubectl set image deployment/auth
        auth-apidocs-image=${CONTAINER_URL}:${CI_COMMIT_REF_NAME}
        --namespace=${CI_ENVIRONMENT_NAME}
    - >
        kubectl set image deployment/auth
        auth-webapp-image=${CONTAINER_URL}:${CI_COMMIT_REF_NAME}
        --namespace=${CI_ENVIRONMENT_NAME}
    - kubectl get pods -n ${CI_ENVIRONMENT_NAME}
  only:
  - tags
  when: manual

deploy-staging:
  <<: *deploy_tpl
  environment:
    name: auth-staging
    url: https://auth-staging.ecadlabs.com

deploy-prod:
  <<: *deploy_tpl
  environment:
    name: auth-prod
    url: https://auth.ecadlabs.com
