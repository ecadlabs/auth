// Code generated by go-bindata.
// sources:
// 1_add_users_table.down.sql
// 1_add_users_table.up.sql
// Makefile
// bindata.go
// migrate.go
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_add_users_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\xb6\xe6\x02\x04\x00\x00\xff\xff\xcf\x0c\x8a\x87\x12\x00\x00\x00")

func _1_add_users_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_add_users_tableDownSql,
		"1_add_users_table.down.sql",
	)
}

func _1_add_users_tableDownSql() (*asset, error) {
	bytes, err := _1_add_users_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_add_users_table.down.sql", size: 18, mode: os.FileMode(420), modTime: time.Unix(1519852554, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_add_users_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcc\xc1\xaa\xc2\x30\x10\x85\xe1\x75\xe6\x29\x66\xd9\x42\xde\xe0\xae\x72\xed\x08\xc1\xb4\xd6\x3a\x41\xbb\x2a\x81\xa4\x34\xd0\x5a\x49\x14\x5f\x5f\xd4\x9d\xe0\xf6\x7c\x87\x7f\xd3\x91\x62\x42\x56\xff\x86\xf0\x9e\x43\xca\x05\x88\xe8\xd1\x5a\x5d\x61\xdb\xe9\x5a\x75\x3d\xee\xa8\x97\x20\xc2\xe2\xe2\x8c\x4c\x67\x46\xdb\xe8\x83\x25\x09\xe2\xea\x72\x7e\xac\xc9\x0f\x93\xcb\xd3\xc7\x9a\x3d\x63\x63\x8d\x91\x20\xc6\x98\xf2\x6d\xb8\xb8\x25\xbc\x49\x82\x98\xdd\xd7\xe0\xbc\x0f\x1e\x59\xd7\x74\x64\x55\xb7\x58\xd1\x56\x59\xf3\xaa\x9c\x8a\x52\x82\x58\x56\x1f\xc7\xf8\xfb\x02\xe5\xdf\x33\x00\x00\xff\xff\xbb\x1b\xde\x50\xc3\x00\x00\x00")

func _1_add_users_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_add_users_tableUpSql,
		"1_add_users_table.up.sql",
	)
}

func _1_add_users_tableUpSql() (*asset, error) {
	bytes, err := _1_add_users_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_add_users_table.up.sql", size: 195, mode: os.FileMode(420), modTime: time.Unix(1520008798, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xca\xcc\x4b\x49\x2c\x49\xd4\x4b\xcf\xb7\x52\xd0\xd2\x2b\x2e\xcc\xe1\xe2\x4c\xcf\xd7\x85\x8a\x2a\xe8\x16\x64\xa7\x2b\xe4\x66\xa6\x17\x25\x96\x64\xe6\xe7\x15\x2b\xe8\x01\x02\x00\x00\xff\xff\xed\x56\x13\xd2\x2f\x00\x00\x00")

func makefileBytes() ([]byte, error) {
	return bindataRead(
		_makefile,
		"Makefile",
	)
}

func makefile() (*asset, error) {
	bytes, err := makefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Makefile", size: 47, mode: os.FileMode(420), modTime: time.Unix(1519853583, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1520008815, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _migrateGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x52\xcd\x4e\xdb\x40\x10\x3e\x7b\x9f\x62\xf0\xa1\x5a\x57\xae\x0d\xd7\xa2\x1c\x4a\x68\x25\x0e\x45\x2d\x29\xea\x21\x8a\xd0\xda\x9e\x98\x55\xec\xdd\x64\x76\x0c\x42\x51\xde\xbd\x5a\xaf\x63\x11\x89\x42\x38\x72\xb4\xe7\xfb\x9b\x9d\x6f\xad\xca\x95\xaa\x11\x5a\x5d\x93\x62\x6d\x8d\x13\x42\xb7\x6b\x4b\x0c\x52\x44\x71\xa5\x58\x15\xca\x61\xee\x36\x4d\x2c\xa2\xb8\xd6\x7c\xdf\x15\x59\x69\xdb\xbc\x55\xcc\xe8\xf2\x40\xc4\x57\x87\xf9\x28\xb3\xb6\x8e\x6b\x42\xf7\x3a\xdc\xd9\x8e\x4a\xcc\x6b\xfb\xa5\xd0\xc6\x73\x3d\xdc\x20\xe7\x1d\xf5\x29\x1c\x53\x69\xcd\x43\x2c\x12\x21\x4a\x6b\x5c\x9f\xb5\xc2\xa5\xea\x1a\x9e\x5a\x63\xb0\xe4\x3f\xba\x45\xdb\x31\x4c\xe0\xec\xd4\xc3\x96\x9d\x29\xe1\x67\xd0\xbf\xbc\x90\x55\x01\x9f\xdd\xa6\xc9\x2e\x2f\x12\x40\x22\x4b\xb0\x15\x51\xb0\x4d\xfd\x0f\xf8\x3a\x81\xc1\x3b\xfb\xab\xf9\xfe\xca\x38\x56\xa6\x44\xb9\xff\x79\x83\x01\x2d\xbf\x39\x87\x7c\xad\x5a\x74\x32\x49\xc1\xdb\x48\xa3\x5a\x04\xc7\xa4\x4d\x9d\x80\x9c\x2f\x8a\x27\x0e\xaa\x96\x12\xef\x13\x11\x72\x47\x06\x7a\x6a\x8f\x4e\x44\xb4\x4b\x12\x11\xe9\x65\x6f\x7e\x32\x01\xa3\x9b\xe7\x50\x24\x12\xd1\x4e\x88\xa8\x22\xfd\x80\x34\x66\xdc\xbf\xe7\x61\xc8\xaa\x48\xe1\xd3\x38\x9a\x5a\xb3\xd4\xf5\x76\x77\x94\x7e\x3b\x4a\x0f\xc7\xc8\xae\xf1\xf1\x40\x3c\x7e\x76\x96\x14\xf6\x6f\x16\x8f\x97\x4d\x21\x64\x3c\xca\x6e\x40\x78\xbb\xec\x76\x2d\x93\xf3\xb7\x08\xc3\xb7\xd1\x8d\xd8\x1d\x5e\x55\xee\x4b\x76\x4b\xcd\xf8\xfa\xe3\x6d\xf3\x1c\x66\xc8\x50\x86\x76\x68\x6b\x80\x43\x43\x44\xd4\x51\x33\x2e\xdd\x51\x93\xfd\x52\xe4\x0e\xd4\x8e\xda\x64\xb3\xa7\xff\xee\x90\x9e\x64\xe0\xdc\xa5\x60\x57\x7e\xb0\x99\xc7\x83\xf5\xdd\xe0\x1b\x2f\xce\xe1\xc4\xae\x7a\xad\x97\xa6\x30\x81\xf9\x22\xac\xb1\x1d\xfa\x9e\xfd\xb0\xd4\x2a\xbe\x32\x2c\x5f\x2c\x7b\x0a\x67\xa7\xc9\xce\xc7\xf1\x3b\x65\x37\xea\xb1\xcf\x02\x13\xd8\x64\xdf\x4d\x69\x2b\x94\x89\xf8\x18\x35\xff\x6f\x0d\x67\x7d\x9c\x37\xca\xe8\xb7\x9f\xf5\xc1\xe4\x71\x76\xef\xae\x61\xb8\xed\xc8\x99\x36\xd6\xe1\x7b\xdb\xfb\x2f\x00\x00\xff\xff\xd5\x9a\x16\x01\x7b\x05\x00\x00")

func migrateGoBytes() ([]byte, error) {
	return bindataRead(
		_migrateGo,
		"migrate.go",
	)
}

func migrateGo() (*asset, error) {
	bytes, err := migrateGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrate.go", size: 1403, mode: os.FileMode(420), modTime: time.Unix(1520008517, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_add_users_table.down.sql": _1_add_users_tableDownSql,
	"1_add_users_table.up.sql": _1_add_users_tableUpSql,
	"Makefile": makefile,
	"bindata.go": bindataGo,
	"migrate.go": migrateGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"1_add_users_table.down.sql": &bintree{_1_add_users_tableDownSql, map[string]*bintree{}},
	"1_add_users_table.up.sql": &bintree{_1_add_users_tableUpSql, map[string]*bintree{}},
	"Makefile": &bintree{makefile, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
	"migrate.go": &bintree{migrateGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

