// Code generated by go-bindata.
// sources:
// data/10_add_email_gen_column.down.sql
// data/10_add_email_gen_column.up.sql
// data/11_add_tenants_table.down.sql
// data/11_add_tenants_table.up.sql
// data/1_add_users_table.down.sql
// data/1_add_users_table.up.sql
// data/2_add_roles_table.down.sql
// data/2_add_roles_table.up.sql
// data/3_add_log_table.down.sql
// data/3_add_log_table.up.sql
// data/4_not_null.down.sql
// data/4_not_null.up.sql
// data/5_bootstrap.down.sql
// data/5_bootstrap.up.sql
// data/6_add_gen_column.down.sql
// data/6_add_gen_column.up.sql
// data/7_add_ip_column.down.sql
// data/7_add_ip_column.up.sql
// data/8_add_user_addr_columns.down.sql
// data/8_add_user_addr_columns.up.sql
// data/9_add_log_columns.down.sql
// data/9_add_log_columns.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __10_add_email_gen_columnDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xcd\x4d\xcc\xcc\x89\x4f\x4f\xcd\xb3\xe6\x02\x04\x00\x00\xff\xff\x15\xfc\x69\x9a\x29\x00\x00\x00")

func _10_add_email_gen_columnDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__10_add_email_gen_columnDownSql,
		"10_add_email_gen_column.down.sql",
	)
}

func _10_add_email_gen_columnDownSql() (*asset, error) {
	bytes, err := _10_add_email_gen_columnDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10_add_email_gen_column.down.sql", size: 41, mode: os.FileMode(420), modTime: time.Unix(1532446858, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __10_add_email_gen_columnUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xcd\x4d\xcc\xcc\x89\x4f\x4f\xcd\x53\xf0\xf4\x0b\x71\x75\x77\x0d\x52\xf0\xf3\x0f\x51\xf0\x0b\xf5\xf1\x51\x70\x71\x75\x73\x0c\xf5\x09\x51\x30\xb0\xe6\x02\x04\x00\x00\xff\xff\x95\xf3\x7e\x91\x43\x00\x00\x00")

func _10_add_email_gen_columnUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__10_add_email_gen_columnUpSql,
		"10_add_email_gen_column.up.sql",
	)
}

func _10_add_email_gen_columnUpSql() (*asset, error) {
	bytes, err := _10_add_email_gen_columnUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "10_add_email_gen_column.up.sql", size: 67, mode: os.FileMode(420), modTime: time.Unix(1532446858, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __11_add_tenants_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x49\xcd\x4b\xcc\x2b\x29\xb6\xe6\x42\x12\xcb\x4d\xcd\x4d\x4a\x2d\x2a\xce\xc8\x2c\xb0\x06\x04\x00\x00\xff\xff\x84\xb1\xc8\xb1\x2a\x00\x00\x00")

func _11_add_tenants_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__11_add_tenants_tableDownSql,
		"11_add_tenants_table.down.sql",
	)
}

func _11_add_tenants_tableDownSql() (*asset, error) {
	bytes, err := _11_add_tenants_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "11_add_tenants_table.down.sql", size: 42, mode: os.FileMode(420), modTime: time.Unix(1545660305, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __11_add_tenants_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x53\xc1\x6e\x9b\x40\x14\x3c\xc3\x57\xcc\x0d\x88\x90\xa2\x4a\xbd\xe5\xb4\x86\xe7\x66\xd5\x65\xb1\x60\xa9\xeb\x5e\x2c\x9a\xdd\xd6\xab\x1a\xb0\x00\xbb\xea\xdf\x57\x40\x8c\xeb\xc4\x52\xab\x5e\x72\xe4\x69\x66\x78\x6f\x66\x76\x41\x1f\xb8\x7c\x70\xdd\x28\x23\xa6\x08\x8a\x2d\x04\xa1\x37\x75\x59\xf7\x9d\xef\x3a\x56\xa3\x28\x78\x8c\x55\xc6\x13\x96\x6d\xf0\x91\x36\x88\x69\xc9\x0a\xa1\x70\x3c\x5a\xbd\xfd\x6e\x6a\xd3\x96\xbd\xd9\x9e\xde\xfb\x41\xe8\x3a\x75\x59\x19\x28\xfa\xac\x42\xd7\x29\xb5\x36\x1a\x8a\x27\x94\x2b\x96\xac\xb0\xe6\xea\x71\xfc\xc4\x97\x54\x12\x64\xaa\x20\x0b\x21\x66\x41\x99\xae\x47\x8d\xaa\xd1\xf6\x9b\xfd\x2f\xea\xa1\x6d\x7a\xf3\xd4\x1b\x8d\x45\x9a\x0a\x62\xf2\x35\x74\xc9\x44\x4e\xc3\x76\xed\xd3\xce\x9e\xfe\x8a\x74\x83\x3f\xdc\xd9\xac\x08\x95\xa9\xbe\x9a\xb6\xdb\xd9\xc3\xb6\xff\x75\x30\x60\x39\x48\x16\x09\x7c\xaf\xf9\x59\x9b\xd6\x0b\xe1\x4d\x10\x2f\x78\xe9\xeb\x85\xea\xbb\xce\xb1\x33\xed\xf6\xec\x6f\x46\x4b\xca\x48\x46\x94\x63\x98\x77\xbe\xd5\x01\x52\x89\x62\x15\x0f\xf4\x88\xe5\x11\x8b\x69\x98\xc4\x24\xe8\x32\x09\x5d\x67\x0a\xeb\x96\xd2\x39\xc6\x7f\xd7\x7a\x83\xc4\x2a\x53\x4d\x3e\xbe\xf4\xf5\x15\xe3\x6c\x6b\xe8\x02\xb8\x6a\xa4\xff\xec\x65\x88\xd9\x8c\x60\xcc\x8d\xcb\x9c\x32\x05\x2e\x55\x7a\x76\x03\xfe\x50\xd1\x10\x73\x53\x02\x7c\x62\xa2\xa0\x1c\xbe\xd7\x36\x4d\xef\x85\x50\x59\x41\x03\xfb\xfe\x0e\x4c\x6b\x94\xfb\x3d\x0e\xad\x39\xd9\xe6\xd8\x4d\xe9\xa0\x6f\xd0\xef\x0c\x06\xfc\xb3\x2e\xee\xee\xaf\xfe\x76\xb9\xe6\xf6\x76\x39\x09\x8a\x14\xac\x1e\xfa\x33\x03\xfc\xab\xf1\x25\xd9\x65\x96\x26\xf3\x01\xeb\x47\xca\x08\xe3\x43\xdb\xdb\x1f\x06\xd3\xda\x10\x3c\xe1\x0a\xef\x82\x09\x3c\xee\x39\xf4\x2f\x4d\x12\xae\x1e\x7e\x07\x00\x00\xff\xff\x54\xc7\xd4\x2d\xe7\x03\x00\x00")

func _11_add_tenants_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__11_add_tenants_tableUpSql,
		"11_add_tenants_table.up.sql",
	)
}

func _11_add_tenants_tableUpSql() (*asset, error) {
	bytes, err := _11_add_tenants_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "11_add_tenants_table.up.sql", size: 999, mode: os.FileMode(420), modTime: time.Unix(1545937686, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_add_users_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\xb6\xe6\x02\x04\x00\x00\xff\xff\xcf\x0c\x8a\x87\x12\x00\x00\x00")

func _1_add_users_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_add_users_tableDownSql,
		"1_add_users_table.down.sql",
	)
}

func _1_add_users_tableDownSql() (*asset, error) {
	bytes, err := _1_add_users_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_add_users_table.down.sql", size: 18, mode: os.FileMode(420), modTime: time.Unix(1529430051, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_add_users_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\x41\x4b\xc4\x30\x10\x85\xcf\xc9\xaf\x98\x63\x0b\x39\xa8\x78\xf3\x34\xbb\x3b\xcb\x06\xd3\x64\xcd\x4e\x5c\xeb\xa5\x04\x12\x69\xc0\x5a\x69\x50\xff\xbe\x58\x41\x0f\xde\x3c\xbe\xc7\xf7\x3e\x78\x5b\x4f\xc8\x04\x8c\x1b\x43\xf0\x56\xf3\x52\x1b\x29\x4a\x82\x10\xf4\x0e\x8e\x5e\x77\xe8\x7b\xb8\xa5\x5e\x49\x91\xa7\x58\x9e\xe1\x1e\xfd\xf6\x80\xbe\xb9\xbc\xb8\xba\x6e\xc1\x3a\x06\x1b\x8c\x81\x60\xf5\x5d\x20\x25\xc5\x6b\xac\xf5\x63\x5e\xd2\x30\xc6\x3a\x02\xd3\x03\xff\x40\x4a\x8a\x97\x38\xe5\xb5\x54\x52\xc4\x94\x72\x02\xd6\x1d\x9d\x18\xbb\x23\x9c\x35\x1f\xd6\x08\x8f\xce\xd2\xaf\x7a\x47\x7b\x0c\xe6\x4b\x73\x6e\x5a\x25\xc5\x34\xa7\xf2\x54\xfe\x35\x5d\x2f\x0c\xef\x79\xf9\x16\x6c\x9c\x33\x84\xf6\x2f\xbf\x47\x73\x22\xd9\xde\x7c\x06\x00\x00\xff\xff\x1d\x0c\xf1\xf7\x1e\x01\x00\x00")

func _1_add_users_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_add_users_tableUpSql,
		"1_add_users_table.up.sql",
	)
}

func _1_add_users_tableUpSql() (*asset, error) {
	bytes, err := _1_add_users_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_add_users_table.up.sql", size: 286, mode: os.FileMode(420), modTime: time.Unix(1529430051, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_add_roles_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xca\xcf\x49\x2d\xb6\x06\x04\x00\x00\xff\xff\xf9\xdd\xb1\x51\x11\x00\x00\x00")

func _2_add_roles_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_add_roles_tableDownSql,
		"2_add_roles_table.down.sql",
	)
}

func _2_add_roles_tableDownSql() (*asset, error) {
	bytes, err := _2_add_roles_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_add_roles_table.down.sql", size: 17, mode: os.FileMode(420), modTime: time.Unix(1529430051, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_add_roles_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\x28\xca\xcf\x49\x2d\xd6\xe0\xe2\x2c\x2d\x4e\x2d\x8a\xcf\x4c\x51\x08\x0d\xf5\x74\xd1\xe1\xe2\x04\x09\x2b\x84\x39\x06\x39\x7b\x38\x06\x69\x18\x1a\x18\x99\x68\xea\x70\x71\x06\x04\x79\xfa\x3a\x06\x45\x2a\x78\xbb\x46\x2a\x68\x40\x35\xe8\x80\x4d\xd0\xe4\xd2\xb4\x06\x04\x00\x00\xff\xff\xf5\x68\xf3\xff\x57\x00\x00\x00")

func _2_add_roles_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_add_roles_tableUpSql,
		"2_add_roles_table.up.sql",
	)
}

func _2_add_roles_tableUpSql() (*asset, error) {
	bytes, err := _2_add_roles_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_add_roles_table.up.sql", size: 87, mode: os.FileMode(420), modTime: time.Unix(1529430051, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_add_log_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xc8\xc9\x4f\xb7\x06\x04\x00\x00\xff\xff\x5e\x0c\xb6\xd7\x0f\x00\x00\x00")

func _3_add_log_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_add_log_tableDownSql,
		"3_add_log_table.down.sql",
	)
}

func _3_add_log_tableDownSql() (*asset, error) {
	bytes, err := _3_add_log_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_add_log_table.down.sql", size: 15, mode: os.FileMode(420), modTime: time.Unix(1529430051, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_add_log_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xc8\xb1\x0a\xc2\x30\x10\x06\xe0\xb9\x79\x8a\x7f\x6c\xa1\xa3\xb8\x38\x9d\xed\x49\x23\x69\x22\xe9\xc5\x82\x8b\x04\x1a\x8a\x20\x0a\x6d\xf4\xf9\x45\x27\xc7\xef\x6b\x3c\x93\x30\x84\xf6\x86\x71\x7f\xce\xa5\x2a\xf2\x0a\xd1\x3d\x0f\x42\xfd\x09\xa3\x96\xee\x47\x5c\x9c\x65\x58\x27\xb0\xc1\x18\xb4\x7c\xa0\x60\x04\xd6\x8d\x65\x55\xab\x22\xbd\xd3\x23\xe3\x4c\xbe\xe9\xc8\x97\xdb\xcd\xf7\x5e\x6b\x5a\xae\xb7\x09\x21\xe8\xb6\x56\x45\x8e\xcb\x9c\xf2\x5f\x4c\x31\x47\x1c\x07\x67\x55\xb5\xfb\x04\x00\x00\xff\xff\x68\xb3\x50\x13\x88\x00\x00\x00")

func _3_add_log_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_add_log_tableUpSql,
		"3_add_log_table.up.sql",
	)
}

func _3_add_log_tableUpSql() (*asset, error) {
	bytes, err := _3_add_log_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_add_log_table.up.sql", size: 136, mode: os.FileMode(420), modTime: time.Unix(1529430051, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __4_not_nullDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\x56\x80\x88\x38\xfb\xfb\x84\xfa\xfa\x29\xe4\x25\xe6\xa6\x2a\xb8\x04\xf9\x07\x28\xf8\xf9\x87\x28\xf8\x85\xfa\xf8\x58\x03\x02\x00\x00\xff\xff\xb2\xa0\xe0\x10\x32\x00\x00\x00")

func _4_not_nullDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__4_not_nullDownSql,
		"4_not_null.down.sql",
	)
}

func _4_not_nullDownSql() (*asset, error) {
	bytes, err := _4_not_nullDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "4_not_null.down.sql", size: 50, mode: os.FileMode(420), modTime: time.Unix(1529711024, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __4_not_nullUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\xb3\xe6\x0a\x0d\x70\x71\x0c\x71\x55\x28\x2d\x4e\x2d\x2a\x56\x08\x76\x0d\x51\xc8\x4b\xcc\x4d\x55\xb0\x55\x50\x57\x57\x08\xf7\x70\x0d\x72\x85\xf0\x3d\x83\x15\xfc\x42\x7d\x7c\xac\xb9\x1c\x7d\x42\x5c\x83\x14\x42\x1c\x9d\x7c\x60\x7a\x20\x22\xce\xfe\x3e\xa1\xbe\x7e\x10\xc5\x20\x53\xfc\xfc\x43\xc0\x3a\x74\x70\xc8\xbb\xb8\xba\x39\x86\xfa\x84\x28\xa8\xab\x5b\x73\x39\xfb\xfb\xfa\x7a\x86\x58\x03\x02\x00\x00\xff\xff\x51\xc4\xcf\x47\x91\x00\x00\x00")

func _4_not_nullUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__4_not_nullUpSql,
		"4_not_null.up.sql",
	)
}

func _4_not_nullUpSql() (*asset, error) {
	bytes, err := _4_not_nullUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "4_not_null.up.sql", size: 145, mode: os.FileMode(420), modTime: time.Unix(1529711024, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __5_bootstrapDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x48\xca\xcf\x2f\x29\x2e\x29\x4a\x2c\xb0\x06\x04\x00\x00\xff\xff\xf2\x59\xf5\x1a\x15\x00\x00\x00")

func _5_bootstrapDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__5_bootstrapDownSql,
		"5_bootstrap.down.sql",
	)
}

func _5_bootstrapDownSql() (*asset, error) {
	bytes, err := _5_bootstrapDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "5_bootstrap.down.sql", size: 21, mode: os.FileMode(420), modTime: time.Unix(1529711024, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __5_bootstrapUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcb\x31\x0e\xc2\x30\x0c\x05\xd0\x19\x9f\xe2\x8f\xed\x19\x32\x39\xc5\x45\x91\x5c\x5b\x6a\x1c\xf6\x30\x57\x2a\x82\xaa\xe7\x47\xb0\xb0\xbf\x97\xe5\x56\x2c\x11\x4d\xab\x70\x08\x82\xb3\x0a\x1e\xfb\x7e\xbc\x8f\x57\x7f\x0e\x74\x39\xfb\x86\xec\xae\xc2\x06\xf3\x80\x35\x55\x5c\x65\xe6\xa6\x81\x99\xb5\x0a\x8d\x89\xa8\x58\x95\x35\x50\x2c\xfc\xdf\x31\x9c\x7d\x1b\x71\x67\x6d\x52\x31\xfc\xf4\x17\x4f\xbe\x2c\x25\xd2\x27\x00\x00\xff\xff\xbd\x0c\x52\x7a\x7c\x00\x00\x00")

func _5_bootstrapUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__5_bootstrapUpSql,
		"5_bootstrap.up.sql",
	)
}

func _5_bootstrapUpSql() (*asset, error) {
	bytes, err := _5_bootstrapUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "5_bootstrap.up.sql", size: 124, mode: os.FileMode(420), modTime: time.Unix(1529711024, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __6_add_gen_columnDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\x56\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x28\x48\x2c\x2e\x2e\xcf\x2f\x4a\x89\x4f\x4f\xcd\xb3\x06\x04\x00\x00\xff\xff\xf7\x09\xd5\xe9\x2b\x00\x00\x00")

func _6_add_gen_columnDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__6_add_gen_columnDownSql,
		"6_add_gen_column.down.sql",
	)
}

func _6_add_gen_columnDownSql() (*asset, error) {
	bytes, err := _6_add_gen_columnDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "6_add_gen_column.down.sql", size: 43, mode: os.FileMode(420), modTime: time.Unix(1529711024, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __6_add_gen_columnUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x31\x0a\x80\x30\x0c\x05\xd0\xab\xfc\x23\xb8\x3b\x45\x1b\x45\x88\x29\x94\x64\x16\xc1\xe2\xa6\xd2\x20\x5e\xdf\x47\x62\x5c\x60\x34\x08\xe3\x8d\xda\x02\x94\x12\xc6\x2c\xbe\x2a\x9e\x3d\xe2\xbb\xdb\xb1\x9d\xf5\xc2\xa2\xc6\x33\x17\x68\x36\xa8\x8b\x20\xf1\x44\x2e\x86\xae\xff\x03\x00\x00\xff\xff\x36\x26\x6d\xf2\x45\x00\x00\x00")

func _6_add_gen_columnUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__6_add_gen_columnUpSql,
		"6_add_gen_column.up.sql",
	)
}

func _6_add_gen_columnUpSql() (*asset, error) {
	bytes, err := _6_add_gen_columnUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "6_add_gen_column.up.sql", size: 69, mode: os.FileMode(420), modTime: time.Unix(1529711024, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __7_add_ip_columnDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\xc9\x4f\x57\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x48\x4c\x49\x29\xb2\xe6\x02\x04\x00\x00\xff\xff\x85\x4a\x91\x9c\x22\x00\x00\x00")

func _7_add_ip_columnDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__7_add_ip_columnDownSql,
		"7_add_ip_column.down.sql",
	)
}

func _7_add_ip_columnDownSql() (*asset, error) {
	bytes, err := _7_add_ip_columnDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "7_add_ip_column.down.sql", size: 34, mode: os.FileMode(420), modTime: time.Unix(1530306711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __7_add_ip_columnUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xc8\xc9\x4f\x57\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\x48\x4c\x49\x29\x52\x08\x73\x0c\x72\xf6\x70\x0c\xd2\x30\x33\xd1\xb4\x06\x04\x00\x00\xff\xff\x61\xf7\x7c\xff\x2c\x00\x00\x00")

func _7_add_ip_columnUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__7_add_ip_columnUpSql,
		"7_add_ip_column.up.sql",
	)
}

func _7_add_ip_columnUpSql() (*asset, error) {
	bytes, err := _7_add_ip_columnUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "7_add_ip_column.up.sql", size: 44, mode: os.FileMode(420), modTime: time.Unix(1530306711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __8_add_user_addr_columnsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\xe6\xe2\x74\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\x49\x2c\x2e\x89\xcf\xc9\x4f\xcf\xcc\x8b\x4f\x4c\x49\x29\xd2\xc1\x29\x5b\x52\x8c\x4d\xae\x28\x35\xad\x28\xb5\x38\x03\xa7\x5e\x98\x7c\x49\xb1\x35\x17\x20\x00\x00\xff\xff\xb1\xe2\xea\x62\x8a\x00\x00\x00")

func _8_add_user_addr_columnsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__8_add_user_addr_columnsDownSql,
		"8_add_user_addr_columns.down.sql",
	)
}

func _8_add_user_addr_columnsDownSql() (*asset, error) {
	bytes, err := _8_add_user_addr_columnsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "8_add_user_addr_columns.down.sql", size: 138, mode: os.FileMode(420), modTime: time.Unix(1530306711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __8_add_user_addr_columnsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\xe6\xe2\x74\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\xc9\x4f\xcf\xcc\x8b\x4f\x4c\x49\x29\x52\x08\x73\x0c\x72\xf6\x70\x0c\xd2\x30\x33\xd1\x54\xf0\xf3\x0f\x51\xf0\x0b\xf5\xf1\x51\x70\x71\x75\x73\x0c\xf5\x09\x51\x50\x57\xd7\xc1\xa2\xaf\xa4\x58\x21\xc4\xd3\xd7\x35\x38\xc4\xd1\x37\x40\x21\xdc\x33\xc4\x03\xcc\x55\x88\xf2\xf7\x73\xc5\x62\x44\x6a\x41\x7e\x72\x06\x9a\x39\x45\xa9\x69\x45\xa9\xc5\x19\x64\xb8\x00\xa6\x93\x1c\x37\x58\x73\x01\x02\x00\x00\xff\xff\x07\xaf\xae\x99\x16\x01\x00\x00")

func _8_add_user_addr_columnsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__8_add_user_addr_columnsUpSql,
		"8_add_user_addr_columns.up.sql",
	)
}

func _8_add_user_addr_columnsUpSql() (*asset, error) {
	bytes, err := _8_add_user_addr_columnsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "8_add_user_addr_columns.up.sql", size: 278, mode: os.FileMode(420), modTime: time.Unix(1530306711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __9_add_log_columnsDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcb\x4d\x0a\xc2\x30\x10\xc5\xf1\x75\xe7\x14\x43\xd7\xf5\x04\x59\xb5\x35\x48\x21\x99\x48\x4d\xc1\x9d\x14\x26\x84\x80\x5a\xc9\x87\xe7\x17\xaa\x1b\x15\xba\x7c\x7f\x7e\xaf\x93\x87\x81\x04\x40\xab\xac\x1c\xd1\xb6\x9d\x92\x78\x5d\x3c\x54\xfb\xd1\x1c\xb1\x37\x6a\xd2\x84\x81\x9b\xef\x70\x4b\xbe\x81\xea\xfd\xf9\x24\xf7\x74\xf7\x8c\x2b\x22\x63\x91\x26\xa5\x7e\xc9\xcc\x1c\xb7\x45\x49\x2e\x5e\x02\x6f\xa3\x3c\x47\xef\xf2\x1f\x13\x00\xeb\x96\x67\x2b\xe9\x34\x18\xc2\xba\x94\xc0\xbb\x25\xa5\x47\x2d\x00\x7a\xa3\xf5\x60\xc5\x2b\x00\x00\xff\xff\x73\xb6\x3d\x95\xf1\x00\x00\x00")

func _9_add_log_columnsDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__9_add_log_columnsDownSql,
		"9_add_log_columns.down.sql",
	)
}

func _9_add_log_columnsDownSql() (*asset, error) {
	bytes, err := _9_add_log_columnsDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "9_add_log_columns.down.sql", size: 241, mode: os.FileMode(420), modTime: time.Unix(1530306711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __9_add_log_columnsUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x91\xcd\x6e\x82\x40\x14\x85\xd7\x9d\xa7\x38\x71\xa3\x26\x76\xd7\x1d\x71\x31\xca\xb5\x9d\x74\x18\x0c\xdc\x49\x71\x45\x48\x98\x10\x12\x0a\x0d\x3f\x3e\x7f\x03\xb5\xda\x1a\x75\x39\x73\xbf\xef\x64\xce\x9d\x0d\xbd\x2a\xe3\x09\xb1\x8d\x48\x32\x81\x12\x26\x13\xab\xd0\x40\xed\x60\x42\x06\x25\x2a\xe6\x18\xb3\x61\x28\xf3\xe7\xa6\xeb\xbe\x66\x9e\x10\x52\x33\x45\x60\xb9\xd1\x84\xaa\x29\xc4\x93\xf4\x7d\x6c\x43\x6d\x03\x83\x32\x87\xb5\xca\xc7\x3e\x52\x81\x8c\x0e\x78\xa7\x03\x7c\xda\x49\xab\x19\x63\x48\x5a\xb8\xda\xb5\x59\xef\xd2\xe3\xcb\x62\xb9\xfa\xe7\x7e\x76\x05\x98\x12\xf6\x84\xb0\x7b\x7f\x7c\x4f\xd5\x14\x88\x89\x31\x74\xae\x4d\xcb\x1c\xeb\x9f\x8c\xba\xac\x16\x4b\x7c\xbc\x51\x44\xe7\x91\x8a\x61\xac\xd6\xde\xb5\xda\x67\x6d\xe1\xfa\x3b\xf2\x65\x78\x4f\xcf\xf2\xbc\xc5\x1a\xf3\xf9\xc9\x98\xce\x67\xf8\xc6\x2a\xa6\x8b\x53\x21\x77\x74\x75\x3f\xc5\x8c\xbb\x1c\x95\xd5\x15\x31\xc5\x3d\x02\x7e\xeb\x3d\x62\x2e\x2d\xfe\x52\xe3\xaf\x86\x41\xa0\xd8\x13\xdf\x01\x00\x00\xff\xff\xb3\x47\x29\x12\xe6\x01\x00\x00")

func _9_add_log_columnsUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__9_add_log_columnsUpSql,
		"9_add_log_columns.up.sql",
	)
}

func _9_add_log_columnsUpSql() (*asset, error) {
	bytes, err := _9_add_log_columnsUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "9_add_log_columns.up.sql", size: 486, mode: os.FileMode(420), modTime: time.Unix(1530306711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"10_add_email_gen_column.down.sql": _10_add_email_gen_columnDownSql,
	"10_add_email_gen_column.up.sql":   _10_add_email_gen_columnUpSql,
	"11_add_tenants_table.down.sql":    _11_add_tenants_tableDownSql,
	"11_add_tenants_table.up.sql":      _11_add_tenants_tableUpSql,
	"1_add_users_table.down.sql":       _1_add_users_tableDownSql,
	"1_add_users_table.up.sql":         _1_add_users_tableUpSql,
	"2_add_roles_table.down.sql":       _2_add_roles_tableDownSql,
	"2_add_roles_table.up.sql":         _2_add_roles_tableUpSql,
	"3_add_log_table.down.sql":         _3_add_log_tableDownSql,
	"3_add_log_table.up.sql":           _3_add_log_tableUpSql,
	"4_not_null.down.sql":              _4_not_nullDownSql,
	"4_not_null.up.sql":                _4_not_nullUpSql,
	"5_bootstrap.down.sql":             _5_bootstrapDownSql,
	"5_bootstrap.up.sql":               _5_bootstrapUpSql,
	"6_add_gen_column.down.sql":        _6_add_gen_columnDownSql,
	"6_add_gen_column.up.sql":          _6_add_gen_columnUpSql,
	"7_add_ip_column.down.sql":         _7_add_ip_columnDownSql,
	"7_add_ip_column.up.sql":           _7_add_ip_columnUpSql,
	"8_add_user_addr_columns.down.sql": _8_add_user_addr_columnsDownSql,
	"8_add_user_addr_columns.up.sql":   _8_add_user_addr_columnsUpSql,
	"9_add_log_columns.down.sql":       _9_add_log_columnsDownSql,
	"9_add_log_columns.up.sql":         _9_add_log_columnsUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"10_add_email_gen_column.down.sql": &bintree{_10_add_email_gen_columnDownSql, map[string]*bintree{}},
	"10_add_email_gen_column.up.sql":   &bintree{_10_add_email_gen_columnUpSql, map[string]*bintree{}},
	"11_add_tenants_table.down.sql":    &bintree{_11_add_tenants_tableDownSql, map[string]*bintree{}},
	"11_add_tenants_table.up.sql":      &bintree{_11_add_tenants_tableUpSql, map[string]*bintree{}},
	"1_add_users_table.down.sql":       &bintree{_1_add_users_tableDownSql, map[string]*bintree{}},
	"1_add_users_table.up.sql":         &bintree{_1_add_users_tableUpSql, map[string]*bintree{}},
	"2_add_roles_table.down.sql":       &bintree{_2_add_roles_tableDownSql, map[string]*bintree{}},
	"2_add_roles_table.up.sql":         &bintree{_2_add_roles_tableUpSql, map[string]*bintree{}},
	"3_add_log_table.down.sql":         &bintree{_3_add_log_tableDownSql, map[string]*bintree{}},
	"3_add_log_table.up.sql":           &bintree{_3_add_log_tableUpSql, map[string]*bintree{}},
	"4_not_null.down.sql":              &bintree{_4_not_nullDownSql, map[string]*bintree{}},
	"4_not_null.up.sql":                &bintree{_4_not_nullUpSql, map[string]*bintree{}},
	"5_bootstrap.down.sql":             &bintree{_5_bootstrapDownSql, map[string]*bintree{}},
	"5_bootstrap.up.sql":               &bintree{_5_bootstrapUpSql, map[string]*bintree{}},
	"6_add_gen_column.down.sql":        &bintree{_6_add_gen_columnDownSql, map[string]*bintree{}},
	"6_add_gen_column.up.sql":          &bintree{_6_add_gen_columnUpSql, map[string]*bintree{}},
	"7_add_ip_column.down.sql":         &bintree{_7_add_ip_columnDownSql, map[string]*bintree{}},
	"7_add_ip_column.up.sql":           &bintree{_7_add_ip_columnUpSql, map[string]*bintree{}},
	"8_add_user_addr_columns.down.sql": &bintree{_8_add_user_addr_columnsDownSql, map[string]*bintree{}},
	"8_add_user_addr_columns.up.sql":   &bintree{_8_add_user_addr_columnsUpSql, map[string]*bintree{}},
	"9_add_log_columns.down.sql":       &bintree{_9_add_log_columnsDownSql, map[string]*bintree{}},
	"9_add_log_columns.up.sql":         &bintree{_9_add_log_columnsUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
