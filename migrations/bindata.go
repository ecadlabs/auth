// Code generated by go-bindata.
// sources:
// data/1_add_users_table.down.sql
// data/1_add_users_table.up.sql
// data/2_add_roles_table.down.sql
// data/2_add_roles_table.up.sql
// data/3_add_log_table.down.sql
// data/3_add_log_table.up.sql
// data/4_not_null.down.sql
// data/4_not_null.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_add_users_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\xb6\xe6\x02\x04\x00\x00\xff\xff\xcf\x0c\x8a\x87\x12\x00\x00\x00")

func _1_add_users_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_add_users_tableDownSql,
		"1_add_users_table.down.sql",
	)
}

func _1_add_users_tableDownSql() (*asset, error) {
	bytes, err := _1_add_users_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_add_users_table.down.sql", size: 18, mode: os.FileMode(420), modTime: time.Unix(1519852554, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_add_users_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\x41\x4b\xc4\x30\x10\x85\xcf\xc9\xaf\x98\x63\x0b\x39\xa8\x78\xf3\x34\xbb\x3b\xcb\x06\xd3\x64\xcd\x4e\x5c\xeb\xa5\x04\x12\x69\xc0\x5a\x69\x50\xff\xbe\x58\x41\x0f\xde\x3c\xbe\xc7\xf7\x3e\x78\x5b\x4f\xc8\x04\x8c\x1b\x43\xf0\x56\xf3\x52\x1b\x29\x4a\x82\x10\xf4\x0e\x8e\x5e\x77\xe8\x7b\xb8\xa5\x5e\x49\x91\xa7\x58\x9e\xe1\x1e\xfd\xf6\x80\xbe\xb9\xbc\xb8\xba\x6e\xc1\x3a\x06\x1b\x8c\x81\x60\xf5\x5d\x20\x25\xc5\x6b\xac\xf5\x63\x5e\xd2\x30\xc6\x3a\x02\xd3\x03\xff\x40\x4a\x8a\x97\x38\xe5\xb5\x54\x52\xc4\x94\x72\x02\xd6\x1d\x9d\x18\xbb\x23\x9c\x35\x1f\xd6\x08\x8f\xce\xd2\xaf\x7a\x47\x7b\x0c\xe6\x4b\x73\x6e\x5a\x25\xc5\x34\xa7\xf2\x54\xfe\x35\x5d\x2f\x0c\xef\x79\xf9\x16\x6c\x9c\x33\x84\xf6\x2f\xbf\x47\x73\x22\xd9\xde\x7c\x06\x00\x00\xff\xff\x1d\x0c\xf1\xf7\x1e\x01\x00\x00")

func _1_add_users_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_add_users_tableUpSql,
		"1_add_users_table.up.sql",
	)
}

func _1_add_users_tableUpSql() (*asset, error) {
	bytes, err := _1_add_users_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_add_users_table.up.sql", size: 286, mode: os.FileMode(420), modTime: time.Unix(1527798975, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_add_roles_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xca\xcf\x49\x2d\xb6\x06\x04\x00\x00\xff\xff\xf9\xdd\xb1\x51\x11\x00\x00\x00")

func _2_add_roles_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_add_roles_tableDownSql,
		"2_add_roles_table.down.sql",
	)
}

func _2_add_roles_tableDownSql() (*asset, error) {
	bytes, err := _2_add_roles_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_add_roles_table.down.sql", size: 17, mode: os.FileMode(420), modTime: time.Unix(1527798209, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_add_roles_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\x28\xca\xcf\x49\x2d\xd6\xe0\xe2\x2c\x2d\x4e\x2d\x8a\xcf\x4c\x51\x08\x0d\xf5\x74\xd1\xe1\xe2\x04\x09\x2b\x84\x39\x06\x39\x7b\x38\x06\x69\x18\x1a\x18\x99\x68\xea\x70\x71\x06\x04\x79\xfa\x3a\x06\x45\x2a\x78\xbb\x46\x2a\x68\x40\x35\xe8\x80\x4d\xd0\xe4\xd2\xb4\x06\x04\x00\x00\xff\xff\xf5\x68\xf3\xff\x57\x00\x00\x00")

func _2_add_roles_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_add_roles_tableUpSql,
		"2_add_roles_table.up.sql",
	)
}

func _2_add_roles_tableUpSql() (*asset, error) {
	bytes, err := _2_add_roles_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_add_roles_table.up.sql", size: 87, mode: os.FileMode(420), modTime: time.Unix(1527798186, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_add_log_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xc8\xc9\x4f\xb7\x06\x04\x00\x00\xff\xff\x5e\x0c\xb6\xd7\x0f\x00\x00\x00")

func _3_add_log_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_add_log_tableDownSql,
		"3_add_log_table.down.sql",
	)
}

func _3_add_log_tableDownSql() (*asset, error) {
	bytes, err := _3_add_log_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_add_log_table.down.sql", size: 15, mode: os.FileMode(420), modTime: time.Unix(1529083289, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __3_add_log_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xc8\xb1\x0a\xc2\x30\x10\x06\xe0\xb9\x79\x8a\x7f\x6c\xa1\xa3\xb8\x38\x9d\xed\x49\x23\x69\x22\xe9\xc5\x82\x8b\x04\x1a\x8a\x20\x0a\x6d\xf4\xf9\x45\x27\xc7\xef\x6b\x3c\x93\x30\x84\xf6\x86\x71\x7f\xce\xa5\x2a\xf2\x0a\xd1\x3d\x0f\x42\xfd\x09\xa3\x96\xee\x47\x5c\x9c\x65\x58\x27\xb0\xc1\x18\xb4\x7c\xa0\x60\x04\xd6\x8d\x65\x55\xab\x22\xbd\xd3\x23\xe3\x4c\xbe\xe9\xc8\x97\xdb\xcd\xf7\x5e\x6b\x5a\xae\xb7\x09\x21\xe8\xb6\x56\x45\x8e\xcb\x9c\xf2\x5f\x4c\x31\x47\x1c\x07\x67\x55\xb5\xfb\x04\x00\x00\xff\xff\x68\xb3\x50\x13\x88\x00\x00\x00")

func _3_add_log_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__3_add_log_tableUpSql,
		"3_add_log_table.up.sql",
	)
}

func _3_add_log_tableUpSql() (*asset, error) {
	bytes, err := _3_add_log_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "3_add_log_table.up.sql", size: 136, mode: os.FileMode(420), modTime: time.Unix(1529089274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __4_not_nullDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x28\x2d\x4e\x2d\x2a\x56\x80\x88\x38\xfb\xfb\x84\xfa\xfa\x29\xe4\x25\xe6\xa6\x2a\xb8\x04\xf9\x07\x28\xf8\xf9\x87\x28\xf8\x85\xfa\xf8\x58\x03\x02\x00\x00\xff\xff\xb2\xa0\xe0\x10\x32\x00\x00\x00")

func _4_not_nullDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__4_not_nullDownSql,
		"4_not_null.down.sql",
	)
}

func _4_not_nullDownSql() (*asset, error) {
	bytes, err := _4_not_nullDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "4_not_null.down.sql", size: 50, mode: os.FileMode(420), modTime: time.Unix(1529432235, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __4_not_nullUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\xb3\xe6\x0a\x0d\x70\x71\x0c\x71\x55\x28\x2d\x4e\x2d\x2a\x56\x08\x76\x0d\x51\xc8\x4b\xcc\x4d\x55\xb0\x55\x50\x57\x57\x08\xf7\x70\x0d\x72\x85\xf0\x3d\x83\x15\xfc\x42\x7d\x7c\xac\xb9\x1c\x7d\x42\x5c\x83\x14\x42\x1c\x9d\x7c\x60\x7a\x20\x22\xce\xfe\x3e\xa1\xbe\x7e\x10\xc5\x20\x53\xfc\xfc\x43\xc0\x3a\x74\x70\xc8\xbb\xb8\xba\x39\x86\xfa\x84\x28\xa8\xab\x5b\x73\x39\xfb\xfb\xfa\x7a\x86\x58\x03\x02\x00\x00\xff\xff\x51\xc4\xcf\x47\x91\x00\x00\x00")

func _4_not_nullUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__4_not_nullUpSql,
		"4_not_null.up.sql",
	)
}

func _4_not_nullUpSql() (*asset, error) {
	bytes, err := _4_not_nullUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "4_not_null.up.sql", size: 145, mode: os.FileMode(420), modTime: time.Unix(1529432251, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_add_users_table.down.sql": _1_add_users_tableDownSql,
	"1_add_users_table.up.sql": _1_add_users_tableUpSql,
	"2_add_roles_table.down.sql": _2_add_roles_tableDownSql,
	"2_add_roles_table.up.sql": _2_add_roles_tableUpSql,
	"3_add_log_table.down.sql": _3_add_log_tableDownSql,
	"3_add_log_table.up.sql": _3_add_log_tableUpSql,
	"4_not_null.down.sql": _4_not_nullDownSql,
	"4_not_null.up.sql": _4_not_nullUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"1_add_users_table.down.sql": &bintree{_1_add_users_tableDownSql, map[string]*bintree{}},
	"1_add_users_table.up.sql": &bintree{_1_add_users_tableUpSql, map[string]*bintree{}},
	"2_add_roles_table.down.sql": &bintree{_2_add_roles_tableDownSql, map[string]*bintree{}},
	"2_add_roles_table.up.sql": &bintree{_2_add_roles_tableUpSql, map[string]*bintree{}},
	"3_add_log_table.down.sql": &bintree{_3_add_log_tableDownSql, map[string]*bintree{}},
	"3_add_log_table.up.sql": &bintree{_3_add_log_tableUpSql, map[string]*bintree{}},
	"4_not_null.down.sql": &bintree{_4_not_nullDownSql, map[string]*bintree{}},
	"4_not_null.up.sql": &bintree{_4_not_nullUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

